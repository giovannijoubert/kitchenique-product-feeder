import { Parser } from "json2csv";
export default class Yuppiechef {
  constructor() {}

  getProductDataFile(products) {
    // Yuppiechef wants ' prepended to the stock code
    products.forEach((product) => {
      product.code = "'" + product.code;
    });

    // field mapping
    const fields = [
      {
        label: "Code",
        value: "code",
      },
      {
        label: "Description",
        value: "description",
      },
      {
        label: "Stock Qty",
        value: "onHand",
      },
      {
        label: "ETA (Future date in format: DD/MM/YYYY)",
        value: "",
      },
      {
        label: "No ETA Reason",
        value: "",
      },
      {
        label: "Yuppiechef Comments",
        value: "",
      },
    ];

    // convert JSON to CSV
    const json2csvParser = new Parser({ fields });
    const csv = json2csvParser.parse(products);

    return csv;
  }

  getProductPriceFile(products) {
    let YuppieProducts = [
      "1004246-910",
      "1004313-040",
      "1005298-265",
      "1005400-040",
      "1005748-040",
      "1005787-390",
      "1008038-918",
      "1008163-149",
      "1008243-040",
      "1009253-149",
      "1009269-149",
      "1009272-149",
      "1009551-047",
      "1009571-660",
      "1010789-158",
      "1011291-149",
      "1011292-149",
      "1011471-746",
      "1011484-149",
      "1011748-524",
      "1011748-660",
      "1012365-040",
      "1012365-660",
      "1012715-104",
      "1012828-040",
      "1013043-149",
      "1013044-149",
      "1013258-149",
      "1013428-040",
      "1013428-660",
      "1013719-880",
      "1013862-660",
      "1013888-591",
      "1014158-158",
      "1014159-660",
      "1014160-660",
      "1014372-221",
      "1014460-660",
      "1014801-040",
      "2001.003",
      "2001.004",
      "2001.005",
      "2001.007",
      "2001.009",
      "2001.01",
      "2001.066",
      "2001.067",
      "2001.068",
      "2001.069",
      "2001.070",
      "2001.071",
      "2001.079",
      "2001.088",
      "2001.126",
      "2001.838",
      "2001.898",
      "2001.945",
      "2001.946",
      "2001.953",
      "2001.954",
      "2001.957",
      "2001.958",
      "2001.961",
      "2001.962",
      "2008.180",
      "320260-918",
      "320361-660",
      "320361-918",
      "358370-040",
      "59038",
      "59091",
      "59110",
      "59125",
      "59136",
      "59142",
      "59143",
      "59152",
      "59153",
      "59154",
      "59160",
      "59161",
      "59162",
      "59168",
      "59169",
      "MC2001109",
      "MC2001833",
      "MC2001896",
      "MC2001897",
      "MC2001943",
      "MC2001944",
      "MC2005251",
      "MC2008200",
      "MC2008201",
      "MC2008202",
      "MC2008204",
      "MC2008205",
      "MC2008206",
      "ROM11505",
      "ROM12005",
      "ROM41405",
      "ROM41505",
      "UMB020390390",
      "UMB020391656",
      "UMB021019410",
      "UMB023006660",
      "UMB0232711190",
      "UMB023320410",
      "UMB023340660",
      "UMB023460660",
      "UMB023460918",
      "UMB023461-040",
      "UMB023464660",
      "UMB023464918",
      "UMB023475660",
      "UMB023836660",
      "UMB023840660",
      "UMB082780-045",
      "UMB082780-213",
      "UMB082780-618",
      "UMB082780-668",
      "UMB082857040",
      "UMB082857560",
      "UMB082857661",
      "UMB1004001660",
      "UMB1004260040",
      "UMB1004260660",
      "UMB1004301149",
      "UMB1004301354",
      "UMB1004433918",
      "UMB1004434660",
      "UMB1004434918",
      "UMB1004435918",
      "UMB10058711006",
      "UMB1008156410",
      "UMB1009488040",
      "UMB1009654040",
      "UMB1009707104",
      "UMB1009707660",
      "UMB1010187-040",
      "UMB1010187-660",
      "UMB1011471-390",
      "UMB1013194040",
      "UMB101321040",
      "UMB1013238104",
      "UMB1013710390",
      "UMB1013878427",
      "UMB1013880668",
      "UMB1014862104",
      "UMB118070040",
      "UMB118070590",
      "UMB318125040",
      "UMB318165022",
      "UMB318165023",
      "UMB318165040",
      "UMB318165370",
      "UMB318165660",
      "UMB318187023",
      "UMB318248-910",
      "UMB318273047",
      "UMB318275047",
      "UMB330065670",
      "UMB330065744",
      "UMB330280040",
      "UMB330281040",
      "UMB330590149",
      "UMB330590505",
      "UMB330590582",
      "UMB330590660",
      "UMB330705047",
      "UMB330720149",
      "UMB330720354",
      "UMB330750040",
      "UMB330750149",
      "UMB330750505",
      "UMB330750660",
      "UW022BOU",
      "UW022INB",
      "UW022LNT",
      "UW022MBU",
      "UW022TBD",
      "UW022WFL",
      "UW647AQU",
      "UW647BFH",
      "UW647IPA",
      "UW647WFL",
      "UW7GRY02L",
      "UW7INB01",
      "UW7INB02",
      "UW7INB03",
      "UW7IPA01",
      "UW7IPA02",
      "UW7IPA03",
      "UW7LNT01",
      "UW7LNT02",
      "UW7LNT03",
      "UW7WFL01",
      "UW7WFL02",
      "UW7WFL03",
    ];

    let selectedProducts = products.filter(i => YuppieProducts.includes(i.code));
    // Yuppiechef wants ' prepended to the stock code
    selectedProducts.forEach((product) => {
        product.code = "'" + product.code;
    });

    // field mapping
    const fields = [
      {
        label: "Code",
        value: "code",
      },
      {
        label: "Description",
        value: "description",
      },
      {
        label: "Price",
        value: "sellPrice3",
      },
      {
        label: "Cost Price",
        value: "",
      },
    ];

    // convert JSON to CSV
    const json2csvParser = new Parser({ fields });
    const csv = json2csvParser.parse(selectedProducts);

    return csv;
  }
}
